<%
  # make sure locals are defined
  type = nil unless local_assigns[:type]
  include_label = nil unless local_assigns[:include_label]
  exclude_type = [] unless local_assigns[:exclude_type]
  exclude_label = [] unless local_assigns[:exclude_label]
  internal = false unless local_assigns[:internal]
  custom_label = nil unless local_assigns[:custom_label]

  if defined?(componentIndex) # Then we're working with a component
    prefix = "component_#{componentIndex}_"
    htmlOpenTemp = "<tr><td>%s </td><td>"
    htmlClose = "</td></tr>"
  else # We're working with an object or collection
    prefix = ''
    htmlOpenTemp = "<dt>%s </dt><dd>"
    htmlClose = "</dd>"
  end
    
  # parse notes
  notes = Hash.new
  
  # Temporary fix the bug that note field not displaying at component level. 
  # The solr index will need to be updated to make it consistent.
  if defined?(componentIndex)
    data = @document["#{prefix}note_json_tesim"]
  else
    data = @document["otherNote_json_tesim"]
  end
 
  if data != nil
    data.sort.each do |n|
      note = JSON.parse(n)
      note_type = note['type']
      note_label = note['displayLabel']
      note_internal = note['internalOnly'] == 'true'
      key = 'General Note'
      # add notes[displaylabel] if exist, if not note[type] else put as general note
      # add notes if type/label match specification
      if ( type == nil || type == note_type ) &&
        ( include_label == nil || include_label == note_label.downcase) &&
        ( exclude_type == [] || !exclude_type.include?(note_type.downcase) ) &&
        ( exclude_label == [] || !exclude_label.include?(note_label.downcase) ) &&
        ( internal == note_internal )
         
        if !note_label.blank?
          key = note_label
        elsif !note_type.blank?
          key = note_type
        end

        key = key.titleize
        notes[key] = [] if notes[key].nil? 
        notes[key] << note
      end
    end
  end

  if !notes.empty?
    # if type is specified, bundle all matching notes under type header
    
    if !custom_label.blank?
      htmlOpen = htmlOpenTemp
      htmlOpen %= custom_label.to_s.titleize
      concat htmlOpen.html_safe
    elsif type != nil 
      htmlOpen = htmlOpenTemp
      htmlOpen %= type.to_s.titleize
      concat htmlOpen.html_safe
    end
    
    notes.each do |key, noteList|
      key = 'Publication Information' if key == 'Publication'

      # Don't sanitize description notes that need to display html contents
      sanitizeHtmlTags = key == 'Description' ? false : true

      # if no type is provided, use types from note json
      if type == nil 
        htmlOpen = htmlOpenTemp
        htmlOpen %= key
        concat htmlOpen.html_safe
      end
      
      noteList.each do |note|
      %>
      <p>
        <% if type == 'identifier' && !note['displayLabel'].blank? %>
          <span class='dams-note-display-label'><%= note['displayLabel'].titleize %></span>: 
        <% end %>
        <% if note['displayLabel'] == 'event id' %>
          <%= link_to note['value'], catalog_index_path({'f[event_ssi][]' => note['value']}) %>
        <% else %>
          <%= auto_link(note['value'].gsub('""', '"').gsub('\n','<br/>'), :sanitize => sanitizeHtmlTags).html_safe %>
        <% end %>
      </p>
      <%
      end
    end
    concat htmlClose.html_safe
  end
%>
