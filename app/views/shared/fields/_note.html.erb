<%
  # make sure locals are defined
  type = nil unless local_assigns[:type]
  label = nil unless local_assigns[:label]
  exclude_type = [] unless local_assigns[:exclude_type]
  exclude_label = [] unless local_assigns[:exclude_label]

  if defined?(componentIndex) # Then we're working with a component
    prefix = "component_#{componentIndex}_"
    htmlOpenTemp = "<tr><td>%s </td><td>"
    htmlClose = "</td></tr>"
  else # We're working with an object or collection
    prefix = ''
    htmlOpenTemp = "<dt>%s </dt><dd>"
    htmlClose = "</dd>"
  end

  # parse notes
  notes = Hash.new
  notes.compare_by_identity
  data = @document["#{prefix}otherNote_json_tesim"]
  if data != nil
    data.each do |n|
      note = JSON.parse(n)
      note_type = note['type']
      note_label = note['displayLabel']
      # add notes[displaylabel] if exist, if not note[type] else put as general note
      # add notes if type/label match specification
      if ( type == nil || type == note_type ) &&
        ( label == nil || label == note_label ) &&
        ( exclude_type == nil || !exclude_type.include?(note_type) ) &&
        ( exclude_label == nil || !exclude_label.include?(note_label) )
        if (!note_label.include? "ARK") #Hide ARK URL from display
          if note_label != nil && !note_label.blank?
            notes[note_label.gsub(/(?<=[A-Za-z])(?=[A-Z])/, ' ').split.map(&:capitalize).join(' ')] = note
          elsif note_type != nil && !note_type.blank?
            notes[note_type.gsub(/(?<=[A-Za-z])(?=[A-Z])/, ' ').split.map(&:capitalize).join(' ')] = note
          else
            notes['General Note'] = note
          end
        end
      end
    end
  end
  #group notes by displaylabel/type
  notes = notes.group_by {|word| word[0] }
  #notes is now a hash where key => {key => value}
  count = 0
  notes.each do |c|
    count += 1
  end

  if count > 0
    if type == nil
      notes.each do |key, noteList|
        htmlOpen = htmlOpenTemp
        htmlOpen %= key
        concat htmlOpen.html_safe
        noteList.each do |k, note|
          %>
          <p><%= auto_link(note['value'].gsub('""', '"').gsub("\n","<br/>"))%></p>
          <%
        end
      end
    else
      htmlOpen = htmlOpenTemp
      htmlOpen %= type.to_s.capitalize
      concat htmlOpen.html_safe
      notes.each do |key, noteList| 
        noteList.each do |k, note|
        %>
        <p><%= auto_link(note['value'].gsub('""', '"').gsub("\n","<br/>"))%></p>
        <%
        end
      end
    end
    concat htmlClose.html_safe
  end
%>
